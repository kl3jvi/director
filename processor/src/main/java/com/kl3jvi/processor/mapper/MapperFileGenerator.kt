package com.kl3jvi.processor.mapper

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.processing.KSPLogger
import com.kl3jvi.processor.property.generateMapperFunction
import com.squareup.kotlinpoet.FileSpec

fun generateAndWriteMapperFile(
    processedProperties: ProcessedProperties,
    codeGenerator: CodeGenerator,
    logger: KSPLogger,
) {
    val mapperFunction = generateMapperFunction(processedProperties, logger)

    val fileSpec = FileSpec.builder(
        processedProperties.sourceClass.packageName.asString(),
        "${processedProperties.sourceClass.simpleName.asString()}Mapper",
    ).addFileComment("Generated by Kl3jvi Mapper Processor\n")
        .addFileComment("Do not modify this class.\n")
        .addFileComment("--------------------------------")
        .addFunction(mapperFunction)
        .build()

    val file = codeGenerator.createNewFile(
        dependencies = Dependencies(aggregating = true, sources = arrayOf()),
        packageName = processedProperties.sourceClass.packageName.asString(),
        fileName = "${processedProperties.sourceClass.simpleName.asString()}Mapper",
    )

    file.bufferedWriter().use { writer ->
        fileSpec.writeTo(writer)
    }
}

fun generateAndWriteEditableMapperFile(
    processedProperties: ProcessedProperties,
    codeGenerator: CodeGenerator,
    logger: KSPLogger,
) {
    val mapperFunction = generateMapperFunction(processedProperties, logger)

    val fileSpec = FileSpec.builder(
        processedProperties.sourceClass.packageName.asString(),
        "${processedProperties.sourceClass.simpleName.asString()}Mapper",
    ).addFileComment("Generated by Kl3jvi Mapper Processor\n")
        .addFileComment("Do not modify this class.\n")
        .addFileComment("--------------------------------")
        .addFunction(mapperFunction)
        .build()

    val file = codeGenerator.createNewFile(
        dependencies = Dependencies(aggregating = true, sources = arrayOf()),
        packageName = processedProperties.sourceClass.packageName.asString(),
        fileName = "${processedProperties.sourceClass.simpleName.asString()}Mapper",
    )

    file.bufferedWriter().use { writer ->
        fileSpec.writeTo(writer)
    }
}

fun generateAndWriteMapperIgnoreFile(
    processedProperties: Unit,
    codeGenerator: CodeGenerator,
    logger: KSPLogger
) {

}